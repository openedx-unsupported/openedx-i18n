"""
Push and pull the latest sources of XBlocks to Transifex in batch.
"""
from __future__ import print_function, unicode_literals

from yaml import safe_load, dump
from subprocess import check_call
from os import path, walk
from os.path import join, relpath
import time

XBLOCKS_DIR = path.dirname(__file__)


def read_prob_files(root):
    for parent, dirs, files in walk(root):
        for f in files:
            if f.endswith('.prob'):
                file_path = relpath(join(parent, f), root)
                with open(file_path) as file_obj:
                    yield {
                        'path': file_path,
                        'content': file_obj.read(),
                    }


def xblock_configs():
    with open(path.join(XBLOCKS_DIR, 'config.yaml'), 'r') as config_file:
        config = safe_load(config_file)

    for xblock in config['xblocks']:
        yield xblock


def pull_translations():
    for config in xblock_configs():
        repos_dir = path.join(XBLOCKS_DIR, 'repos')
        repo_dir = path.join(repos_dir, config['name'])

        try:
            branch = 'i18n-bot/{time}'.format(time=time.strftime('%Y-%m-%d-%H%M%S'))
            check_call(['git', 'clone', config['upstream_repo'], config['name']], cwd=repos_dir)
            check_call(['git', 'remote', 'add', 'local', config['local_repo']], cwd=repo_dir)
            check_call(['git', 'checkout', '-b', branch, 'master'], cwd=repo_dir)
            check_call(config['requirements_script'], shell=True, cwd=repo_dir)
        except Exception as e:
            yield {
                'name': config['name'],
                'stage': 'installation',
                'exception': str(e),
            }
            continue

        try:
            check_call(config['pull_script'], shell=True, cwd=repo_dir)
        except Exception as e:
            yield {
                'name': config['name'],
                'stage': 'pull',
                'exception': str(e),
                'prob_files': list(read_prob_files(repo_dir)),
            }
            continue

        try:
            check_call(['git', 'config', 'user.name', 'Omar Al-Ithawi'], cwd=repo_dir)
            check_call(['git', 'config', 'user.email', 'i@omardo.com'], cwd=repo_dir)
            check_call(['git', 'add', '--all'], cwd=repo_dir)
            check_call(['git', 'commit', '-m', 'Update translations (autogenerated message)'], cwd=repo_dir)
        except Exception as e:
            yield {
                'name': config['name'],
                'stage': 'commit',
                'exception': str(e),
            }
            continue


if __name__ == '__main__':
    errors = list(pull_translations())
    raise Exception(dump({
        'description': 'The following errors have happened while pull translations from Transifex',
        'details': errors,
    }))
