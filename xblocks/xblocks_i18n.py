"""
Push and pull the latest sources of XBlocks to Transifex in batch.
"""
from __future__ import print_function, unicode_literals

from yaml import safe_load
from subprocess import check_call
from os import path
import time

XBLOCKS_DIR = path.dirname(__file__)

XBLOCK_CONFIGS = [{
    'push_script': 'make push_translations',
    'local_repo': 'git@github.com:appsembler/xblock-poll.git',
    'upstream_repo': 'https://github.com/open-craft/xblock-poll.git',
    'name': 'xblock-poll',
    'pull_script': 'make pull_translations',
    'requirements_script': 'make requirements'
}, {
    'push_script': 'make extract_translations; make push_translations',
    'local_repo': 'git@github.com:appsembler/xblock-drag-and-drop-v2.git',
    'upstream_repo': 'https://github.com/edx-solutions/xblock-drag-and-drop-v2.git',
    'name': 'xblock-drag-and-drop-v2',
    'pull_script': 'make pull_translations',
    'requirements_script': 'pip install -r requirements.txt'
}]


def pull_translations():
    for config in XBLOCK_CONFIGS:
        repos_dir = path.join(XBLOCKS_DIR, 'repos')
        repo_dir = path.join(repos_dir, config['name'])

        branch = 'i18n-bot/{time}'.format(time=time.strftime('%Y-%m-%d-%H%M%S'))

        check_call(['git', 'clone', config['upstream_repo'], config['name']], cwd=repos_dir)
        check_call(['git', 'remote', 'add', 'local', config['local_repo']], cwd=repo_dir)
        check_call(['git', 'checkout', '-b', branch, 'master'], cwd=repo_dir)

        check_call(config['requirements_script'], shell=True, cwd=repo_dir)
        check_call(config['pull_script'], shell=True, cwd=repo_dir)

        # TODO: Change to something owned by the Open edX team
        check_call(['git', 'config', 'user.name', 'Open edX i18n Bot'], cwd=repo_dir)
        check_call(['git', 'config', 'user.email', 'omar+openedx-i18n-bot@appsembler.com'],
                   cwd=repo_dir)

        check_call(['git', 'add', '--all'], cwd=repo_dir)
        check_call(['git', 'commit', '-m', 'Update translations (autogenerated message)'],
                   cwd=repo_dir)


if __name__ == '__main__':
    pull_translations()
